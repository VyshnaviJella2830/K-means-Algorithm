# -*- coding: utf-8 -*-
"""k-means algorithm

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uPEL638ZniOJBNcmkYVnF-t6bZVWZ39v
"""

import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

data = pd.read_csv("/content/sample_data/Iris.csv")

features = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']  # Use actual column names from your CSV
X = data[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

k_values = range(2, 11)  # Test K from 2 to 10
inertia_values = []

for k in k_values:  # Iterate through each value of k
    kmeans = KMeans(n_clusters=k, random_state=0)  # Use the current value of k
    kmeans.fit(X_scaled)
    inertia_values.append(kmeans.inertia_)

plt.figure(figsize=(8, 6))
plt.plot(k_values, inertia_values, marker='o')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Sum of Squared Distances (Inertia)')
plt.title('K-means Performance vs. K')
plt.grid(True)
plt.show()

k = 3  # Choose the best K based on the plot above
kmeans = KMeans(n_clusters=k, random_state=0)
kmeans.fit(X_scaled)

labels = kmeans.labels_
centroids = kmeans.cluster_centers_

inertia = kmeans.inertia_
print(f"Inertia (Sum of Squared Distances) for K={k}: {inertia}")

data['cluster'] = labels

plt.figure(figsize=(8, 6))
for cluster in range(k):
    cluster_data = data[data['cluster'] == cluster]
    # Use 'SepalLengthCm' and 'SepalWidthCm' instead of 'sepal_length' and 'sepal_width'
    plt.scatter(cluster_data['SepalLengthCm'], cluster_data['SepalWidthCm'], label=f'Cluster {cluster}')
plt.scatter(centroids[:, 0], centroids[:, 1], s=100, c='red', marker='X', label='Centroids')  # Plot centroids
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.title('K-means Clustering (K=3)')
plt.legend()
plt.grid(True)
plt.show()